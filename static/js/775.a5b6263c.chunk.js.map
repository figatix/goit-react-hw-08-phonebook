{"version":3,"file":"static/js/775.a5b6263c.chunk.js","mappings":"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","sources":["components/Section/Section.styled.js","components/Section/Section.jsx","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["\nexport const styles = {\n  section: { paddingTop: '20px', paddingBottom: '20px' },\n  title: { textAlign: 'center' },\n};","import { Box, Container, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { styles } from './Section.styled';\n\n\nexport const Section = ({ title, children }) => {\n  return (\n    <Box component=\"section\" sx={styles.section}>\n      <Container>\n        {title && (\n          <Typography component=\"h2\" variant=\"h2\" sx={styles.title}>\n            {title}\n          </Typography>\n        )}\n        {children}\n      </Container>\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};","import { Button } from '@mui/material';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLoginForm = styled.form`\n  width: 320px;\n  /* \n   */\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px 0;\n  max-width: 700px;\n  margin: 0 auto;\n`;\n\nexport const StyledLoginLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  width: 100%;\n`;\n\nexport const StyledLoginBtn = styled(Button)`\n  width: 100%;\n`;\n\nexport const StyledRouterLink = styled(Link)`\n  text-decoration: underline;\n`;\n\nexport const styles = {\n  routerLink: {\n    textDecoration: 'underline',\n    color: 'secondary.light',\n  },\n};\n","\nimport { IconButton, InputAdornment, Link, TextField } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login } from \"redux/auth/authOperations\";\nimport { selectIsLoggedIn } from \"redux/auth/authSelectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\n\nimport { StyledLoginBtn, StyledLoginForm, StyledLoginLabel, styles } from \"./LoginForm.styled\";\nimport { toast } from \"react-toastify\";\n\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\n\n\nexport const LoginForm = () => {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn)\n\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n\n  const onLoginInput = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'email': {\n        return setEmail(value)\n      }\n      case 'password': {\n        return setPassword(value)\n      }\n      default: return\n    }\n  }\n\n  const handleLoginSubmit = (e) => {\n    e.preventDefault()\n    const existUser = {\n      email,\n      password,\n    }\n\n    dispatch(login(existUser))\n    if (isLoggedIn) {\n      toast(`Hello, ${email}`)\n\n      dispatch(fetchContacts())\n      e.currentTarget.reset()\n    }\n  }\n\n  return (\n    <>\n      <StyledLoginForm\n        onSubmit={handleLoginSubmit}\n        autoComplete=\"off\">\n        <StyledLoginLabel >\n          <TextField\n            fullWidth\n            required\n            label=\"Email\"\n            variant=\"filled\"\n            color=\"secondary\"\n            value={email}\n            onChange={onLoginInput}\n            type=\"email\"\n            name=\"email\"\n          />\n        </StyledLoginLabel>\n        <StyledLoginLabel >\n          <TextField\n            required\n            label=\"Password\"\n            type={showPassword ? 'text' : 'password'}\n            autoComplete=\"current-password\"\n            variant=\"filled\"\n            color=\"secondary\"\n            value={password}\n            onChange={onLoginInput}\n            name=\"password\"\n            InputProps={{\n              endAdornment: <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>,\n            }}\n\n          />\n        </StyledLoginLabel>\n\n        <StyledLoginBtn\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"secondary\"\n        >Login</StyledLoginBtn>\n\n      </StyledLoginForm>\n\n      <Link component={RouterLink}\n        sx={styles.routerLink}\n        to=\"/register\">\n        Don't have an account? Register\n      </Link>\n    </>\n\n  );\n};\n\n\n\n\n\n\n\n\n\n// ****************************\n\n// import { useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { login } from \"redux/auth/authOperations\";\n// import { selectIsLoggedIn } from \"redux/auth/authSelectors\";\n// import { fetchContacts } from \"redux/contacts/operations\";\n\n// import { StyledLoginBtn, StyledLoginForm, StyledLoginLabel } from \"./LoginForm.styled\";\n\n\n// export const LoginForm = () => {\n//   const [email, setEmail] = useState('')\n//   const [password, setPassword] = useState('')\n//   const dispatch = useDispatch();\n//   const isLoggedIn = useSelector(selectIsLoggedIn)\n\n//   const onLoginInput = (e) => {\n//     const { name, value } = e.target;\n//     switch (name) {\n//       case 'email': {\n//         return setEmail(value)\n//       }\n//       case 'password': {\n//         return setPassword(value)\n//       }\n//       default: return\n//     }\n//   }\n\n//   const handleLoginSubmit = (e) => {\n//     e.preventDefault()\n//     const existUser = {\n//       email,\n//       password,\n//     }\n\n//     console.log(\"ðŸš€ ~ file: LoginForm.jsx:14 ~ LoginForm ~ isLoggedIn:\", isLoggedIn)\n\n\n//     dispatch(login(existUser))\n//     if (isLoggedIn) {\n//       dispatch(fetchContacts())\n//       e.currentTarget.reset()\n//       // reset()\n//     }\n//   }\n\n//   // const reset = () => {\n//   //   setEmail('')\n//   //   setPassword('')\n//   // }\n\n//   return (\n//     <StyledLoginForm\n//       onSubmit={handleLoginSubmit}\n//       autoComplete=\"off\">\n//       <StyledLoginLabel >\n//         Email\n//         <input\n//           value={email}\n//           onChange={onLoginInput}\n//           type=\"email\" name=\"email\" />\n//       </StyledLoginLabel>\n//       <StyledLoginLabel >\n//         Password\n//         <input\n//           value={password}\n//           onChange={onLoginInput}\n//           type=\"password\" name=\"password\"\n//           autoComplete=\"on\"\n//         />\n//       </StyledLoginLabel>\n//       <StyledLoginBtn type=\"submit\">Login</StyledLoginBtn>\n//     </StyledLoginForm>\n//   );\n// };","\nimport { Avatar, Box, Typography } from '@mui/material';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { Section } from 'components/Section/Section';\n\nexport default function LoginPage() {\n  return (\n    <Section>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography\n          component=\"h1\"\n          variant=\"h5\"\n        >\n          Sign in\n        </Typography>\n        <LoginForm />\n      </Box>\n    </Section>\n  );\n}\n\n"],"names":["styles","section","paddingTop","paddingBottom","title","textAlign","Section","children","Box","component","sx","Container","Typography","variant","StyledLoginForm","styled","StyledLoginLabel","StyledLoginBtn","Button","Link","routerLink","textDecoration","color","LoginForm","useState","email","setEmail","password","setPassword","showPassword","setShowPassword","dispatch","useDispatch","isLoggedIn","useSelector","selectIsLoggedIn","onLoginInput","e","target","name","value","onSubmit","preventDefault","existUser","login","toast","fetchContacts","currentTarget","reset","autoComplete","TextField","fullWidth","required","label","onChange","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Visibility","VisibilityOff","RouterLink","to","LoginPage","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined"],"sourceRoot":""}